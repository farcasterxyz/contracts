// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import {IKeyRegistry} from "./IKeyRegistry.sol";
import {IStorageRegistry} from "./IStorageRegistry.sol";

interface IKeyManager {
    /*//////////////////////////////////////////////////////////////
                              CONSTANTS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Contract version specified in the Farcaster protocol version scheme.
     */
    function VERSION() external view returns (string memory);

    /**
     * @notice EIP-712 typehash for Add signatures.
     */
    function ADD_TYPEHASH() external view returns (bytes32);

    /*//////////////////////////////////////////////////////////////
                                STORAGE
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice The KeyRegistry contract.
     */
    function keyRegistry() external view returns (IKeyRegistry);

    /**
     * @notice The StorageRegistry contract.
     */
    function storageRegistry() external view returns (IStorageRegistry);

    /**
     * @notice Add key fee in USD. Fixed point with 8 decimals.
     */
    function usdFee() external view returns (uint256);

    /**
     * @notice Address to which the owner can withdraw funds. Changeable by owner.
     */
    function vault() external view returns (address);

    /*//////////////////////////////////////////////////////////////
                                  VIEWS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Current fee in wei to add a signer key.
     *
     * @return fee in wei
     */
    function fee() external view returns (uint256);

    /*//////////////////////////////////////////////////////////////
                              REGISTRATION
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Add a key associated with the caller's fid, setting the key state to ADDED.
     *         The caller must provide at least fee() wei of payment. Any excess payment
     *         will be refunded to the caller.
     *
     * @param keyType      The key's numeric keyType.
     * @param key          Bytes of the key to add.
     * @param metadataType Metadata type ID.
     * @param metadata     Metadata about the key, which is not stored and only emitted in an event.
     *
     * @return overpayment Amount of native ETH sent in excess of the fee, returned to caller.
     */
    function add(
        uint32 keyType,
        bytes calldata key,
        uint8 metadataType,
        bytes calldata metadata
    ) external payable returns (uint256 overpayment);

    /**
     * @notice Add a key on behalf of another fid owner, setting the key state to ADDED.
     *         caller must supply a valid EIP-712 Add signature from the fid owner.
     *         Caller must provide at least fee() wei of payment. Any excess payment
     *         will be refunded to the caller.
     *
     * @param fidOwner     The fid owner address.
     * @param keyType      The key's numeric keyType.
     * @param key          Bytes of the key to add.
     * @param metadataType Metadata type ID.
     * @param metadata     Metadata about the key, which is not stored and only emitted in an event.
     * @param deadline     Deadline after which the signature expires.
     * @param sig          EIP-712 Add signature generated by fid owner.
     *
     * @return overpayment Amount of native ETH sent in excess of the fee, returned to caller.
     */
    function addFor(
        address fidOwner,
        uint32 keyType,
        bytes calldata key,
        uint8 metadataType,
        bytes calldata metadata,
        uint256 deadline,
        bytes calldata sig
    ) external payable returns (uint256 overpayment);

    /*//////////////////////////////////////////////////////////////
                         PERMISSIONED ACTIONS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Set the fee per key add in USD. Only callable by owner.
     *
     * @param _usdFee The new fee in USD. Fixed point value with 8 decimals.
     */
    function setUsdFee(uint256 _usdFee) external;

    /**
     * @notice Change the vault address that can receive funds from this contract.
     *         Only callable by owner.
     *
     * @param vaultAddr The new vault address.
     */
    function setVault(address vaultAddr) external;

    /**
     * @notice Withdraw a specified amount of ether from the contract balance to the vault.
     *         Only callable by owner.
     *
     * @param amount The amount of ether to withdraw.
     */
    function withdraw(uint256 amount) external;

    /**
     * @notice Pause adding keys.
     *         Must be called by the owner.
     */
    function pause() external;

    /**
     * @notice Unpause adding keys.
     *         Must be called by the owner.
     */
    function unpause() external;
}
